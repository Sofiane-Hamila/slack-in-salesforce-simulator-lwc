import { LightningElement, api, wire } from 'lwc';
import getCurrentUserInfo from '@salesforce/apex/UserInfoController.getCurrentUserInfo';
// FORCE CACHE REFRESH - v2.0 - 2024

export default class SlackSimulator extends LightningElement {
    @api recordId;
    @api objectApiName;
    
    _conversationData;
    
    @api 
    get conversationData() {
        return this._conversationData;
    }
    
    set conversationData(value) {
        console.log('üéÆ SlackSimulator: conversationData setter appel√© avec:', value);
        this._conversationData = value;
        
        if (value) {
            console.log('üéÆ SlackSimulator: Traitement des nouvelles donn√©es');
            this.processConversationData(value);
        }
    }
    
    // Propri√©t√© pour stocker le contenu du champ de saisie
    newMessageText = '';
    
    // Propri√©t√© pour stocker les donn√©es de l'utilisateur (sera remplie par @wire)
    currentUser = {
        data: {
            Name: 'Bastien GOURY',
            FullPhotoUrl: ''
        }
    };
    
    // Wire pour r√©cup√©rer les vraies informations utilisateur Salesforce
    @wire(getCurrentUserInfo)
    wiredCurrentUser(result) {
        console.log('üî• Wire getCurrentUserInfo result:', result);
        if (result.data) {
            console.log('üî• User data received:', result.data);
            this.currentUser = {
                data: {
                    Name: result.data.Name || 'Utilisateur',
                    FullPhotoUrl: result.data.FullPhotoUrl || ''
                }
            };
            console.log('üî• currentUser updated:', this.currentUser);
        } else if (result.error) {
            console.error('üî¥ Erreur lors de la r√©cup√©ration des infos utilisateur:', result.error);
        }
    }
    
    // Gestionnaire d'erreur pour les avatars
    handleAvatarError(event) {
        console.log('üî¥ Erreur de chargement d\'avatar pour:', event.target.alt);
        console.log('üî¥ URL qui a √©chou√©:', event.target.src);
        
        // Remplacer par un avatar SVG par d√©faut
        const userName = event.target.alt || 'User';
        const initials = userName.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
        const colors = ['#4A154B', '#36C5F0', '#2EB67D', '#E01E5A', '#ECB22E'];
        const colorIndex = userName.length % colors.length;
        const color = colors[colorIndex];
        
        const fallbackSvg = `<svg width="40" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="40" height="40" fill="${color}"/><text x="20" y="25" font-family="Arial" font-size="14" fill="white" text-anchor="middle">${initials}</text></svg>`;
        event.target.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(fallbackSvg);
    }
    
    // Propri√©t√©s pour la conversation configur√©e
    conversationFlow = [];
    isConversationActive = false;
    lastTriggeredStep = 0;
    
    // Tableau des messages (initialement vide pour une conversation propre)
    messages = [];
    
    // Cl√© pour le localStorage des messages
    MESSAGES_STORAGE_KEY = 'slackSimulator_messages';
    
    // Flag pour √©viter les chargements multiples
    isMessagesLoaded = false;
    
    // Sauvegarder les messages dans localStorage
    saveMessagesToLocalStorage() {
        try {
            const dataToSave = {
                messages: this.messages,
                conversationFlow: this.conversationFlow,  // ‚úÖ Ajouter conversationFlow
                conversationState: {
                    isConversationActive: this.isConversationActive,
                    lastTriggeredStep: this.lastTriggeredStep
                },
                timestamp: new Date().toISOString(),
                version: '1.0'
            };
            localStorage.setItem(this.MESSAGES_STORAGE_KEY, JSON.stringify(dataToSave));
            console.log('üíæ Messages et conversationFlow sauvegard√©s dans localStorage');
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde des messages:', error);
        }
    }
    
    // Charger les messages depuis localStorage
    loadMessagesFromLocalStorage() {
        try {
            console.log('üìÇ Tentative de chargement des messages depuis localStorage...');
            const savedData = localStorage.getItem(this.MESSAGES_STORAGE_KEY);
            console.log('üìÇ Donn√©es brutes localStorage:', savedData ? 'Trouv√©es' : 'Aucune');
            
            if (savedData) {
                const parsedData = JSON.parse(savedData);
                console.log('üìÇ Donn√©es pars√©es:', parsedData);
                
                if (parsedData.messages && Array.isArray(parsedData.messages)) {
                    this.messages = parsedData.messages;
                    
                    // ‚úÖ Restaurer conversationFlow
                    if (parsedData.conversationFlow && Array.isArray(parsedData.conversationFlow)) {
                        this.conversationFlow = parsedData.conversationFlow;
                        console.log('üìÇ ConversationFlow restaur√©:', this.conversationFlow.length, '√©tapes');
                    }
                    
                    if (parsedData.conversationState) {
                        this.isConversationActive = parsedData.conversationState.isConversationActive || false;
                        this.lastTriggeredStep = parsedData.conversationState.lastTriggeredStep || 0;
                        console.log('üìÇ √âtat de conversation restaur√©:', {
                            isConversationActive: this.isConversationActive,
                            lastTriggeredStep: this.lastTriggeredStep,
                            conversationFlow: this.conversationFlow.length
                        });
                    }
                    console.log('üìÇ ‚úÖ Messages et conversation charg√©s depuis localStorage:', this.messages.length, 'messages');
                    return true;
                } else {
                    console.log('üìÇ ‚ùå Format de donn√©es invalide dans localStorage');
                }
            } else {
                console.log('üìÇ ‚ùå Aucune donn√©e trouv√©e dans localStorage');
            }
            return false;
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement des messages:', error);
            return false;
        }
    }
    
    // Charger conversationFlow depuis la configuration localStorage
    loadConversationFlowFromConfig() {
        try {
            console.log('üìÇ Tentative de chargement de conversationFlow depuis la configuration...');
            const configData = localStorage.getItem('slackSimulator_configuration');
            
            if (configData) {
                const parsedConfig = JSON.parse(configData);
                console.log('üìÇ Configuration trouv√©e:', parsedConfig);
                
                if (parsedConfig.scenarioRows && Array.isArray(parsedConfig.scenarioRows)) {
                    // Reconstituer conversationFlow √† partir de scenarioRows
                    this.conversationFlow = parsedConfig.scenarioRows.map(row => ({
                        order: row.order || 1,
                        messageBody: row.messageBody || '',
                        keywords: row.keywords || '',
                        userName: row.userName || 'Syst√®me',
                        timestamp: row.timestamp || '',
                        avatarUrl: row.avatarUrl || '',
                        delay: row.delay || 0
                    }));
                    
                    console.log('üìÇ ‚úÖ ConversationFlow reconstruit depuis la configuration:', this.conversationFlow.length, '√©tapes');
                    return true;
                }
            }
            
            console.log('üìÇ ‚ùå Aucune configuration trouv√©e');
            return false;
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement de la configuration:', error);
            return false;
        }
    }

    
    // Fonction pour mettre √† jour le texte du message √† chaque frappe
    handleMessageInput(event) {
        this.newMessageText = event.target.value;
    }
    
    // Fonction pour g√©rer la touche Entr√©e dans le textarea
    handleKeyDown(event) {
        // Si Ctrl+Enter ou Shift+Enter, envoyer le message
        if (event.key === 'Enter' && (event.ctrlKey || event.shiftKey)) {
            event.preventDefault();
            this.handleSendMessage();
        }
    }
    
    // Fonction pour faire d√©filer automatiquement vers le bas
    scrollToBottom() {
        // Utiliser setTimeout pour s'assurer que le DOM est mis √† jour
        setTimeout(() => {
            const messagesArea = this.template.querySelector('.messages-area');
            if (messagesArea) {
                messagesArea.scrollTop = messagesArea.scrollHeight;
            }
        }, 100); // Petit d√©lai pour laisser le temps au DOM de se mettre √† jour
    }
    
    // Fonction pour formater le timestamp en fran√ßais
    formatTimestamp() {
        const now = new Date();
        return now.toLocaleString('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    // Fonction pour r√©cup√©rer l'URL de l'avatar
    getAvatarUrl(avatarUrl, userName = '') {
        try {
            console.log('üî• getAvatarUrl called with:', { avatarUrl, userName });
            
            // Si c'est une URL Salesforce valide (commence par / ou https://), l'utiliser directement
            if (avatarUrl && avatarUrl.trim() !== '') {
                // URLs Salesforce commencent g√©n√©ralement par /profilephoto/ ou sont des URLs compl√®tes
                if (avatarUrl.startsWith('/') || avatarUrl.startsWith('https://')) {
                    console.log('üî• Using direct URL:', avatarUrl);
                    return avatarUrl;
                }
            }
            
            // G√©n√©rer un avatar avec les initiales du nom
            let initials = 'üë§';
            let colorSeed = 'default';
            
            if (userName && userName.trim() !== '') {
                initials = userName.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
                colorSeed = userName;
                console.log('üî• Generated initials from userName:', initials);
            } else if (avatarUrl && avatarUrl.trim() !== '') {
                initials = avatarUrl.substring(0, 2).toUpperCase();
                colorSeed = avatarUrl;
                console.log('üî• Generated initials from avatarUrl:', initials);
            }
            
            // Palette de couleurs Slack
            const colors = ['#4A154B', '#36C5F0', '#2EB67D', '#E01E5A', '#ECB22E', '#FF6900', '#9B59B6'];
            const colorIndex = colorSeed.length % colors.length;
            const color = colors[colorIndex];
            
            const avatarSvg = `<svg width="40" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="40" height="40" fill="${color}"/><text x="20" y="25" font-family="Arial" font-size="14" fill="white" text-anchor="middle" font-weight="bold">${initials}</text></svg>`;
            const result = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(avatarSvg);
            console.log('üî• Generated SVG avatar for:', userName);
            return result;
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration de l\'avatar:', error);
            // Avatar de fallback en cas d'erreur
            const fallbackSvg = `<svg width="40" height="40" xmlns="http://www.w3.org/2000/svg"><rect width="40" height="40" fill="#666"/><text x="20" y="25" font-family="Arial" font-size="16" fill="white" text-anchor="middle">?</text></svg>`;
            return 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(fallbackSvg);
        }
    }
    
    // G√©n√©rer un ID unique pour les messages
    generateMessageId(suffix = '') {
        try {
            const timestamp = Date.now();
            const randomPart = Math.floor(Math.random() * 10000);
            return `msg-${timestamp}-${randomPart}-${suffix}`;
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration d\'ID de message:', error);
            return `msg-${new Date().getTime()}-${suffix}`;
        }
    }
    
    // Fonction principale pour envoyer un message
    handleSendMessage() {
        if (this.newMessageText.trim()) {
            const messageText = this.newMessageText;
            
            // Cr√©er un nouvel objet message
            const userName = this.currentUser?.data?.Name || 'Bastien GOURY';
            const avatarUrl = this.currentUser?.data?.FullPhotoUrl || '';
            
            const newMessage = {
                id: this.generateMessageId('user'),
                userName: userName,
                avatarUrl: this.getAvatarUrl(avatarUrl, userName),
                messageBody: messageText,
                timestamp: this.formatTimestamp()
            };
            
            // Ajouter le nouveau message au tableau
            this.messages = [...this.messages, newMessage];
            
            // Sauvegarder automatiquement les messages
            this.saveMessagesToLocalStorage();
            
            // Vider le champ de saisie - forcer la mise √† jour
            this.newMessageText = '';
            
            // Forcer la mise √† jour du textarea dans le DOM
            const textarea = this.template.querySelector('textarea');
            if (textarea) {
                textarea.value = '';
            }
            
            // Faire d√©filer vers le bas pour voir le nouveau message
            this.scrollToBottom();
            
            // V√©rifier si une √©tape de conversation doit √™tre d√©clench√©e
            // PATCH: V√©rifier conversationFlow juste avant l'utilisation
            if (this.conversationFlow.length === 0) {
                console.log('üö® PATCH: ConversationFlow vide d√©tect√©, rechargement d\'urgence...');
                this.loadConversationFlowFromConfig();
            }
            
            this.checkConversationFlow(messageText);
        }
    }

    // √âcouter l'√©v√©nement de lancement du simulateur
    connectedCallback() {
        try {
            console.log('üéÆ SlackSimulator connected - D√âBUT INITIALISATION');
            console.log('üéÆ SlackSimulator: this =', this);
            console.log('üéÆ SlackSimulator: window =', window);
            
            // Charger les messages sauvegard√©s seulement si pas d√©j√† fait
            if (!this.isMessagesLoaded) {
                console.log('üîÑ Premier chargement des messages...');
                const hasLoadedMessages = this.loadMessagesFromLocalStorage();
                if (!hasLoadedMessages) {
                    this.messages = [];
                } else {
                    // Si des messages ont √©t√© charg√©s, faire d√©filer vers le bas
                    setTimeout(() => {
                        this.scrollToBottom();
                    }, 200);
                }
                this.isMessagesLoaded = true;
            } else {
                console.log('üîÑ Messages d√©j√† charg√©s, ignorer le rechargement');
            }
            
            // IMPORTANT: V√©rifier que conversationFlow est bien charg√©
            console.log('üîç V√©rification conversationFlow apr√®s chargement:', this.conversationFlow.length);
            if (this.conversationFlow.length === 0) {
                console.log('‚ö†Ô∏è ConversationFlow vide, tentative de chargement depuis la configuration...');
                // Essayer de charger depuis la configuration du localStorage
                this.loadConversationFlowFromConfig();
            }
            
            console.log('üéÆ SlackSimulator: Messages initialis√©s dans connectedCallback');
            
            // V√©rifier s'il y a des donn√©es en attente dans window
            this.checkForWindowData();
            
            // √âcouter l'√©v√©nement window personnalis√©
            this.handleSlackDataReady = this.handleSlackDataReady.bind(this);
            window.addEventListener('slackSimulatorDataReady', this.handleSlackDataReady);
            
            // √âcouter l'√©v√©nement de reset du simulateur
            this.handleSimulatorReset = this.handleSimulatorReset.bind(this);
            window.addEventListener('slackSimulatorReset', this.handleSimulatorReset);
            
            console.log('üéÆ SlackSimulator: √âcouteurs d\'√©v√©nements window ajout√©s');
            
            // Test de l'√©couteur d'√©v√©nement
            console.log('üéÆ SlackSimulator: Test de l\'√©couteur...');
            setTimeout(() => {
                console.log('üéÆ SlackSimulator: Envoi d\'un √©v√©nement de test...');
                window.dispatchEvent(new CustomEvent('slackSimulatorDataReady', {
                    detail: { test: '√©v√©nement de test' }
                }));
            }, 1000);
            
            // V√©rifier p√©riodiquement pour les donn√©es (fallback)
            this.windowDataInterval = setInterval(() => {
                this.checkForWindowData();
            }, 100); // V√©rifier toutes les 100ms
            
        } catch (error) {
            console.error('Erreur lors de la connexion du SlackSimulator:', error);
        }
    }

    disconnectedCallback() {
        try {
            console.log('SlackSimulator disconnected');
            
            // Nettoyer l'interval
            if (this.windowDataInterval) {
                clearInterval(this.windowDataInterval);
            }
            
            // Nettoyer les √©couteurs d'√©v√©nements window
            if (this.handleSlackDataReady) {
                window.removeEventListener('slackSimulatorDataReady', this.handleSlackDataReady);
            }
            if (this.handleSimulatorReset) {
                window.removeEventListener('slackSimulatorReset', this.handleSimulatorReset);
            }
        } catch (error) {
            console.error('Erreur lors de la d√©connexion du SlackSimulator:', error);
        }
    }
    
    // M√©thode pour v√©rifier les donn√©es dans window
    @api
    checkForWindowData() {
        console.log('üéÆ SlackSimulator: checkForWindowData appel√©e, window.slackSimulatorData:', window.slackSimulatorData);
        if (window.slackSimulatorData) {
            console.log('üéÆ SlackSimulator: Donn√©es trouv√©es dans window, traitement...');
            
            // V√©rifier si c'est un lancement explicite r√©cent (moins de 5 secondes)
            const data = window.slackSimulatorData;
            const now = Date.now();
            const dataTimestamp = data.timestamp || 0;
            const isRecent = (now - dataTimestamp) < 5000; // 5 secondes
            
            if (data.isExplicitLaunch && isRecent) {
                console.log('üéÆ Lancement explicite r√©cent d√©tect√©, traitement des donn√©es');
                this.processConversationData(window.slackSimulatorData);
            } else {
                console.log('üéÆ Donn√©es anciennes ou rafra√Æchissement, ignorer les donn√©es window');
            }
            
            delete window.slackSimulatorData; // Nettoyer
            
            // Arr√™ter la v√©rification une fois les donn√©es trouv√©es
            if (this.windowDataInterval) {
                clearInterval(this.windowDataInterval);
                this.windowDataInterval = null;
            }
        }
    }
    
    // G√©rer l'√©v√©nement window personnalis√©
    handleSlackDataReady(event) {
        console.log('üéÆüéÆüéÆ SlackSimulator: √âV√âNEMENT RE√áU !!! üéÆüéÆüéÆ', event.detail);
        
        // Log de r√©ception (pas de message visible dans l'interface)
        console.log('‚úÖ Donn√©es re√ßues du configurateur:', event.detail);
        
        this.processConversationData(event.detail);
        
        // Arr√™ter la v√©rification p√©riodique une fois les donn√©es re√ßues
        if (this.windowDataInterval) {
            clearInterval(this.windowDataInterval);
            this.windowDataInterval = null;
        }
    }

    // Traiter les donn√©es de conversation re√ßues via la propri√©t√©
    processConversationData(data) {
        console.log('üéÆ SlackSimulator: processConversationData D√âMARR√â');
        console.log('üéÆ Data re√ßue:', data);
        
        // Stocker les donn√©es de conversation
        this.conversationFlow = data.conversationFlow || [];
        console.log('üéÆ ConversationFlow stock√©:', this.conversationFlow);
        
        // Ne pas √©craser les messages existants lors d'un rafra√Æchissement
        // Seulement les vider si c'est un nouveau lancement explicite
        const isExplicitLaunch = data.isExplicitLaunch || false;
        
        if (isExplicitLaunch || this.messages.length === 0) {
            console.log('üéÆ Nouveau lancement explicite ou aucun message - r√©initialisation');
            this.messages = [];
        } else {
            console.log('üéÆ Messages existants conserv√©s lors du rafra√Æchissement:', this.messages.length, 'messages');
        }
        
        // Activer la conversation
        this.isConversationActive = true;
        
        // Ne remettre lastTriggeredStep √† 0 que lors d'un nouveau lancement explicite
        if (isExplicitLaunch) {
            this.lastTriggeredStep = 0;
            console.log('üéÆ Nouveau lancement - lastTriggeredStep remis √† 0');
        } else {
            console.log('üéÆ Rafra√Æchissement - lastTriggeredStep conserv√©:', this.lastTriggeredStep);
        }
        
        console.log('üéÆ Messages initialis√©s:', this.messages);
        
        // Afficher les messages initiaux (sans keywords)
        console.log('üéÆ Appel de displayInitialMessages...');
        this.displayInitialMessages();
        
        console.log('üéÆ Messages apr√®s displayInitialMessages:', this.messages);
        console.log('üéÆ SlackSimulator: processConversationData TERMIN√â AVEC SUCC√àS');
        
        // Faire d√©filer vers le bas apr√®s avoir charg√© les messages initiaux
        this.scrollToBottom();
        
        // Sauvegarder l'√©tat final apr√®s le traitement
        this.saveMessagesToLocalStorage();
    }

    // Afficher les messages initiaux (√©tapes sans keywords)
    displayInitialMessages() {
        try {
            if (!this.conversationFlow || this.conversationFlow.length === 0) {
                console.log('Aucune conversation flow √† afficher');
                return;
            }
            
            // Filtrer les √©tapes sans keywords (messages initiaux) avec validation robuste
            const initialSteps = this.conversationFlow.filter(step => {
                if (!step) return false;
                
                // V√©rifier si keywords est null, undefined, ou string vide apr√®s trim
                const hasNoKeywords = !step.keywords || 
                                     (typeof step.keywords === 'string' && step.keywords.trim() === '') ||
                                     step.keywords === null ||
                                     step.keywords === undefined;
                
                return hasNoKeywords;
            });
        
        console.log('√âtapes initiales trouv√©es:', initialSteps.length);
        
        // Afficher chaque √©tape initiale
        initialSteps.forEach((step, index) => {
            try {
                const message = {
                    id: this.generateMessageId(index),
                    userName: step.userName || 'Syst√®me',
                    avatarUrl: this.getAvatarUrl(step.avatarUrl, step.userName || 'Syst√®me'),
                    messageBody: step.messageBody || '',
                    timestamp: step.timestamp || this.formatTimestamp()
                    };
                
                this.messages = [...this.messages, message];
                
                // Mettre √† jour le dernier step d√©clench√©
                if (step.order > this.lastTriggeredStep) {
                    this.lastTriggeredStep = step.order;
                    console.log('üìù lastTriggeredStep mis √† jour dans displayInitialMessages:', this.lastTriggeredStep);
                }
            } catch (error) {
                console.error('Erreur lors de l\'affichage du message initial:', error, step);
            }
            });
            
            // Trier les messages par ordre d'affichage (conversion en nombre pour le tri)
            this.messages.sort((a, b) => {
                const aId = typeof a.id === 'string' ? parseInt(a.id.split('-')[1]) || 0 : a.id;
                const bId = typeof b.id === 'string' ? parseInt(b.id.split('-')[1]) || 0 : b.id;
                return aId - bId;
            });
        } catch (error) {
            console.error('Erreur lors de l\'affichage des messages initiaux:', error);
        }
    }

    // V√©rifier si un message d√©clenche une √©tape de conversation
    checkConversationFlow(messageText) {
        console.log('üîç checkConversationFlow appel√© avec:', messageText);
        console.log('üîç isConversationActive:', this.isConversationActive);
        console.log('üîç conversationFlow:', this.conversationFlow);
        console.log('üîç lastTriggeredStep:', this.lastTriggeredStep);
        
        // V√©rification d√©taill√©e des conditions
        console.log('üîç V√©rification des conditions:');
        console.log('üîç - isConversationActive:', this.isConversationActive, typeof this.isConversationActive);
        console.log('üîç - conversationFlow.length:', this.conversationFlow.length);
        console.log('üîç - conversationFlow:', this.conversationFlow);
        
        if (!this.isConversationActive) {
            console.log('‚ùå Conversation non active (isConversationActive = false)');
            return;
        }
        
        if (this.conversationFlow.length === 0) {
            console.log('‚ùå ConversationFlow vide (length = 0)');
            return;
        }
        
        console.log('‚úÖ Conditions valid√©es, poursuite du traitement...');

        const messageLower = messageText.toLowerCase();
        
        // Chercher la prochaine √©tape avec keywords (order sup√©rieur au dernier d√©clench√©)
        const nextSteps = this.conversationFlow.filter(step => {
            if (!step) return false;
            
            // V√©rifier que l'√©tape a des keywords valides
            const hasValidKeywords = step.keywords && 
                                   typeof step.keywords === 'string' && 
                                   step.keywords.trim() !== '';
            
            // V√©rifier que l'ordre est sup√©rieur au dernier d√©clench√©
            const validOrder = step.order && step.order > this.lastTriggeredStep;
            
            return hasValidKeywords && validOrder;
        }).sort((a, b) => a.order - b.order);

        console.log('üîç √âtapes √©ligibles trouv√©es:', nextSteps.length, 'pour le message:', messageText);
        console.log('üîç √âtapes √©ligibles:', nextSteps);

        // V√©rifier la premi√®re √©tape √©ligible
        for (const step of nextSteps) {
            console.log('üîç V√©rification de l\'√©tape:', step);
            if (this.checkKeywordsMatch(step.keywords, messageLower)) {
                console.log('‚úÖ Match trouv√© pour l\'√©tape:', step.order, 'avec les mots-cl√©s:', step.keywords);
                
                // D√©clencher la r√©ponse automatique apr√®s le d√©lai
                setTimeout(() => {
                    this.addAutomaticResponse(step);
                }, (step.delay || 0) * 1000);
                
                // Mettre √† jour le dernier step d√©clench√©
                this.lastTriggeredStep = step.order;
                
                // Sauvegarder imm√©diatement l'√©tat mis √† jour
                this.saveMessagesToLocalStorage();
                console.log('üíæ √âtat de conversation sauvegard√©, lastTriggeredStep:', this.lastTriggeredStep);
                
                break; // Arr√™ter apr√®s le premier match
            }
        }
    }

    // V√©rifier si tous les mots-cl√©s sont pr√©sents (logique ET)
    checkKeywordsMatch(keywords, messageLower) {
        try {
            // Validation robuste des keywords
            if (!keywords || 
                typeof keywords !== 'string' || 
                keywords.trim() === '') {
                console.log('Keywords invalides:', keywords);
                return false;
            }
            
            // Validation du message
            if (!messageLower || typeof messageLower !== 'string') {
                console.log('Message invalide:', messageLower);
                return false;
            }
            
            // S√©parer les mots-cl√©s par virgule et nettoyer
            const keywordList = keywords.split(',')
                .map(keyword => keyword.trim().toLowerCase())
                .filter(keyword => keyword.length > 0); // Enlever les keywords vides
            
            // Si aucun keyword valide, retourner false
            if (keywordList.length === 0) {
                console.log('Aucun keyword valide trouv√©');
                return false;
            }
            
            // V√©rifier que TOUS les mots-cl√©s sont pr√©sents
            const allKeywordsPresent = keywordList.every(keyword => messageLower.includes(keyword));
            
            console.log('V√©rification mots-cl√©s:', keywordList, 'dans:', messageLower, '‚Üí', allKeywordsPresent);
            
            return allKeywordsPresent;
        } catch (error) {
            console.error('Erreur lors de la v√©rification des keywords:', error);
            return false;
        }
    }

    // Ajouter une r√©ponse automatique
    addAutomaticResponse(step) {
        try {
            const autoMessage = {
                id: this.generateMessageId('auto'),
                userName: step.userName || 'Assistant',
                avatarUrl: this.getAvatarUrl(step.avatarUrl, step.userName || 'Assistant'),
                messageBody: step.messageBody || '',
                timestamp: step.timestamp || this.formatTimestamp()
            };
            
            this.messages = [...this.messages, autoMessage];
            console.log('R√©ponse automatique ajout√©e:', autoMessage);
            
            // Sauvegarder automatiquement les messages
            this.saveMessagesToLocalStorage();
            
            // Faire d√©filer vers le bas pour voir la r√©ponse automatique
            this.scrollToBottom();
        } catch (error) {
            console.error('Erreur lors de l\'ajout de la r√©ponse automatique:', error);
        }
    }
    
    // G√©rer l'√©v√©nement de reset du simulateur
    handleSimulatorReset(event) {
        try {
            console.log('üîÑ Reset Simulator - √âv√©nement re√ßu:', event.detail);
            
            // R√©initialiser les messages (vider la conversation)
            this.messages = [];
            
            // R√©initialiser l'√©tat de la conversation
            this.isConversationActive = false;
            this.lastTriggeredStep = 0;
            
            // Vider le champ de saisie
            this.newMessageText = '';
            const textarea = this.template.querySelector('textarea');
            if (textarea) {
                textarea.value = '';
            }
            
            // Nettoyer les donn√©es de conversation (optionnel - garde la config mais reset l'√©tat)
            // this.conversationFlow = []; // D√©comment√© si vous voulez aussi vider la config
            
            // Nettoyer le localStorage des messages
            localStorage.removeItem(this.MESSAGES_STORAGE_KEY);
            
            console.log('üîÑ Simulateur r√©initialis√© avec succ√®s');
            
        } catch (error) {
            console.error('üî¥ Erreur lors du reset du simulateur:', error);
        }
    }

}
